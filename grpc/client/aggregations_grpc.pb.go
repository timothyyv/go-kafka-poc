// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: aggregations.proto

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AggregationClient is the client API for Aggregation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregationClient interface {
	SendAggregation(ctx context.Context, in *AggregationRequest, opts ...grpc.CallOption) (*AggregationResponse, error)
}

type aggregationClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregationClient(cc grpc.ClientConnInterface) AggregationClient {
	return &aggregationClient{cc}
}

func (c *aggregationClient) SendAggregation(ctx context.Context, in *AggregationRequest, opts ...grpc.CallOption) (*AggregationResponse, error) {
	out := new(AggregationResponse)
	err := c.cc.Invoke(ctx, "/aggregation.Aggregation/SendAggregation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregationServer is the server API for Aggregation service.
// All implementations must embed UnimplementedAggregationServer
// for forward compatibility
type AggregationServer interface {
	SendAggregation(context.Context, *AggregationRequest) (*AggregationResponse, error)
	mustEmbedUnimplementedAggregationServer()
}

// UnimplementedAggregationServer must be embedded to have forward compatible implementations.
type UnimplementedAggregationServer struct {
}

func (UnimplementedAggregationServer) SendAggregation(context.Context, *AggregationRequest) (*AggregationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAggregation not implemented")
}
func (UnimplementedAggregationServer) mustEmbedUnimplementedAggregationServer() {}

// UnsafeAggregationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregationServer will
// result in compilation errors.
type UnsafeAggregationServer interface {
	mustEmbedUnimplementedAggregationServer()
}

func RegisterAggregationServer(s grpc.ServiceRegistrar, srv AggregationServer) {
	s.RegisterService(&Aggregation_ServiceDesc, srv)
}

func _Aggregation_SendAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregationServer).SendAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregation.Aggregation/SendAggregation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregationServer).SendAggregation(ctx, req.(*AggregationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Aggregation_ServiceDesc is the grpc.ServiceDesc for Aggregation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aggregation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aggregation.Aggregation",
	HandlerType: (*AggregationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAggregation",
			Handler:    _Aggregation_SendAggregation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aggregations.proto",
}
